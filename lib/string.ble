fn builtin lower(s){
    r = ""
    for each c in s{
        if c == "A" l = "a"
        elif c == "B" l = "b"
        elif c == "C" l = "c"
        elif c == "D" l = "d"
        elif c == "E" l = "e"
        elif c == "F" l = "f"
        elif c == "G" l = "g"
        elif c == "H" l = "h"
        elif c == "I" l = "i"
        elif c == "J" l = "j"
        elif c == "K" l = "k"
        elif c == "L" l = "l"
        elif c == "M" l = "m"
        elif c == "N" l = "n"
        elif c == "O" l = "o"
        elif c == "P" l = "p"
        elif c == "Q" l = "q"
        elif c == "R" l = "r"
        elif c == "S" l = "s"
        elif c == "T" l = "t"
        elif c == "U" l = "u"
        elif c == "V" l = "v"
        elif c == "W" l = "w"
        elif c == "X" l = "x"
        elif c == "Y" l = "y"
        elif c == "Z" l = "z"
        else l = c
        r = r + l
    }
    r
}

fn builtin upper(s){
    r = ""
    for each c in s{
        if c == "a" l = "A"
        elif c == "b" l = "B"
        elif c == "c" l = "C"
        elif c == "d" l = "D"
        elif c == "e" l = "E"
        elif c == "f" l = "F"
        elif c == "g" l = "G"
        elif c == "h" l = "H"
        elif c == "i" l = "I"
        elif c == "j" l = "J"
        elif c == "k" l = "K"
        elif c == "l" l = "L"
        elif c == "m" l = "M"
        elif c == "n" l = "N"
        elif c == "o" l = "O"
        elif c == "p" l = "P"
        elif c == "q" l = "Q"
        elif c == "r" l = "R"
        elif c == "s" l = "S"
        elif c == "t" l = "T"
        elif c == "u" l = "U"
        elif c == "v" l = "V"
        elif c == "w" l = "W"
        elif c == "x" l = "X"
        elif c == "y" l = "Y"
        elif c == "z" l = "Z"
        else l = c
        r = r + l
    }
    r
}

fn builtin split(s, c){
    l = []
    ss = ""
    for i = 0 to +s{
        if s(i, i+c) == c{
            l = l + [ss]
            ss = ""
        }else{
            ss = ss + s(i)
        }
    }
    l = l + [ss]
    l
}

fn builtin join(l, c){
    s = ""
    for each ll in l{
        s = s + c + ll
    }
    s = s(+c, +s)
    s
}

fn builtin strip(s){
    i = 0
    j = +s
    while i < j and [" ", "\t", "\n"] - s(i){
        i = i + 1
    }
    while j > i and [" ", "\t", "\n"] - s(j - 1){
        j = j - 1
    }
    s(i, j)
}

moduleName = "string"