fn builtin range(start, end){
    l = []
    for i = start to end{
        l = l + [i]
    }
    l
}

fn builtin map(f, l){
    nl = []
    for i = 0 to +l{
        nl += [f(l(i))]
    }
    nl
}

fn builtin filter(f, l){
    nl = []
    for each ll in l{
        if f(ll) nl = nl + [ll]
    }
    nl
}

fn builtin reduce(f, l){
    if l == 0{
        return none
    }
    res = l(0)
    for i = 1 to +l{
        res = f(res, l(i))
    }
    res
}

fn builtin any(l){
    for each ll in l{
        if ll{
            return true
        }
    }
    false
}

fn builtin all(l){
    for each ll in l{
        if not ll{
            return false
        }
    }
    true
}

fn builtin index(ll, l){
    for i = 0 to +l{
        if l(i) == ll{
            return i
        }
    }
    -1
}

moduleName = "list"
