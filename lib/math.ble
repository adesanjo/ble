fn builtin min(a, b){
    if a < b a
    else b
}

fn builtin max(a, b){
    if a > b a
    else b
}

fn builtin minl(l){
    if l == 0{
        return none
    }
    res = l(0)
    for i = 1 to +l{
        if l(i) < res{
            res = l(i)
        }
    }
    res
}

fn builtin maxl(l){
    if l == 0{
        return none
    }
    res = l(0)
    for i = 1 to +l{
        if l(i) > res{
            res = l(i)
        }
    }
    res
}

fn builtin abs(x){
    if x < 0 then -x
    else x
}

fn builtin fact(n){
    res = 1
    for i = 2 to n+1{
        res *= i
    }
    res
}

fn builtin sqrt(x){
    x^(0.5)
}

fn builtin deg2rad(d){
    d * PI / 180
}

fn builtin rad2deg(r){
    r * 180 / PI
}

fn builtin sin(x){
    res = 0.0
    n = 0
    term = (-1)^n / fact(2*n + 1) * x^(2*n + 1)
    while abs(term) > 10^(-15){
        res += term
        n += 1
        term = (-1)^n / fact(2*n + 1) * x^(2*n + 1)
    }
    if abs(res) < 10^(-15){
        res = 0.0
    }elif abs(res - 1) < 10^(-15){
        res = 1.0
    }elif abs(res + 1) < 10^(-15){
        res = -1.0
    }
    res
}

fn builtin cos(x){
    res = 0.0
    n = 0
    term = (-1)^n / fact(2*n) * x^(2*n)
    while abs(term) > 10^(-15){
        res += term
        n += 1
        term = (-1)^n / fact(2*n) * x^(2*n)
    }
    if abs(res) < 10^(-15){
        res = 0.0
    }elif abs(res - 1) < 10^(-15){
        res = 1.0
    }elif abs(res + 1) < 10^(-15){
        res = -1.0
    }
    res
}

fn builtin tan(x){
    sin(x) / cos(x)
}

fn builtin asin(x){
    res = 0.0
    if abs(x) > 1{
        return none
    }
    if x > 0.71{
        x = sqrt(1 - x^2)
        comp = 1
    }elif x < -0.71{
        x = sqrt(1 - x^2)
        comp = -1
    }else{
        comp = 0
    }
    n = 0
    term = fact(2*n) / (4^n * fact(n)^2 * (2*n + 1)) * x^(2*n + 1)
    while abs(term) > 10^(-15){
        res += term
        n += 1
        term = fact(2*n) / (4^n * fact(n)^2 * (2*n + 1)) * x^(2*n + 1)
    }
    if comp == 1{
        res = PI/2 - res
    }elif comp == -1{
        res = res - PI/2
    }
    if abs(res) < 10^(-15){
        res = 0.0
    }
    res
}
fn builtin acos(x){
    PI/2 - asin(x)
}

fn builtin sindeg(x){
    x *= PI/180
    res = 0.0
    n = 0
    term = (-1)^n / fact(2*n + 1) * x^(2*n + 1)
    while abs(term) > 10^(-15){
        res += term
        n += 1
        term = (-1)^n / fact(2*n + 1) * x^(2*n + 1)
    }
    if abs(res) < 10^(-15){
        res = 0.0
    }elif abs(res - 1) < 10^(-15){
        res = 1.0
    }elif abs(res + 1) < 10^(-15){
        res = -1.0
    }
    res
}

fn builtin cosdeg(x){
    x *= PI/180
    res = 0.0
    n = 0
    term = (-1)^n / fact(2*n) * x^(2*n)
    while abs(term) > 10^(-15){
        res += term
        n += 1
        term = (-1)^n / fact(2*n) * x^(2*n)
    }
    if abs(res) < 10^(-15){
        res = 0.0
    }elif abs(res - 1) < 10^(-15){
        res = 1.0
    }elif abs(res + 1) < 10^(-15){
        res = -1.0
    }
    res
}

fn builtin tandeg(x){
    x *= PI/180
    sin(x) / cos(x)
}

fn builtin asindeg(x){
    asin(x) * 180/PI
}
fn builtin acosdeg(x){
    acos(x) * 180/PI
}

PI = 3.14159265358979323846

moduleName = "math"
