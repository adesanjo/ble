program			: expr (SEMICOLON expr)* SEMICOLON?

expr            : IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr       : NOT comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV|MOD) factor)*

factor			: (PLUS|MINUS) factor
				: power

power		    : call (POW factor)*

call			: atom ((LPAREN (expr (COMMA expr)*)? RPAREN)* (EQ expr)?)?

atom 			: INT|FLOAT|STRING|IDENTIFIER|BUILTIN
			    : LPAREN expr RPAREN
				: LBRACKET program? RBRACKET
				: include-expr
				: list-expr
				: list-modif-expr
				: if-expr
				: for-expr
				: for-each-expr
				: while-expr
				: func-def
                : disp-expr
				: input-expr
				: rand-expr
				: int-cast
				: str-cast

include-expr	: KEYWORD:INCLUDE expr

list-expr       : LSQBRACKET (expr (COMMA expr)*)? RSQBRACKET

list-modif-expr	: KEYWORD:MUT IDENTIFIER KEYWORD:AT expr (COMMA expr) EQ expr

if-expr			: KEYWORD:IF expr KEYWORD:THEN expr
				  (KEYWORD:ELIF expr KEYWORD:THEN expr)*
				  (KEYWORD:ELSE expr)?

for-expr		: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
				  (KEYWORD:STEP expr)? KEYWORD:DO expr

for-each-expr	: KEYWORD:FOR KEYWORD:EACH IDENTIFIER KEYWORD:IN expr KEYWORD:DO expr

while-expr	    : KEYWORD:WHILE expr KEYWORD:DO expr

func-def		: KEYWORD:FN IDENTIFIER?
				  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN expr

disp-expr       : KEYWORD:DISP expr

input-expr		: KEYWORD:INPUT

rand-expr		: KEYWORD:RAND

int-cast		: KEYWORD:INT expr

float-cast		: KEYWORD:FLOAT expr

str-cast		: KEYWORD:STR expr
